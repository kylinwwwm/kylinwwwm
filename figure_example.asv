param_true.kon1 = 3;
param_true.ron1 = 0.5;
param_true.kon2 = 6;
param_true.ron2 = 0.7;
param_true.koff = 5;
param_true.roff = 0.5;
param_true.mu = 20;
param_true.q = 0.4;

% param_true.kon1 = 1;
% param_true.ron1 = 0.8;
% param_true.kon2 = 3;
% param_true.ron2 = 0.7;
% param_true.koff = 5;
% param_true.roff = 3;
% param_true.mu = 30;
% param_true.q = 0.6;


param_true.delta = 1;
param_true.x0 = [1,0,0];
param_true.tottime = 2000;

[x,t] = simulQM(param_true);
tq = 1500:0.1:param_true.tottime;
xq = interp1(t,x(:,3),tq,'previous');%插值  函数关系由t,x(:,3)给出，插值tq对应的xq
data = xq;

data_mean = mean(data);
data_var = var(data,1);
data_cv2 = data_var / data_mean^2;
data_fano = data_var / data_mean;
data_sk = skewness(data) + 1;
data_kt = kurtosis(data);
data_bc = ((data_sk-1)^2 + 1)/data_kt;
statis = [data_mean,data_cv2,data_fano,data_sk,data_kt,data_bc]

statis_data = statisData(data);%%%%用参数产生的模拟数据得到的汇总统计量，在这里相当于真实数据
statis_ther = statisQM(param_true,4);%%用提前设定好的真实参数计算的汇总统计量
%eps0 = sqrt(sum(statis_data./statis_ther).^2);
eps0 = sqrt(sum(log(statis_data./statis_ther).^2));
N = 1000;
prior = @() [5*rand(),5*rand(),logunif(-1,1),logunif(-1,1),5*rand(),logunif(-1,1),50*rand,1,rand];
f = @(k) statisQM(k,4);%k是param   用推断出的参数计算汇总统计量
%rho = @(s) sqrt(sum(statis_data./s).^2);%s是由f计算得到的汇总统计量
rho = @(s) sqrt(sum(log(statis_data./s).^2));
T = 6;
epsilon = 1;
%[result,flag] = ABCRejectionSampler(N,prior,f,rho,epsilon,T,1);
proposal_sigma = 0.2;
proposal = @(x) lognrnd(x,proposal_sigma);
proposal_pdf = @(kon1_post,kon1_prior,kon2_post,kon2_prior,ron1_post,ron1_prior,ron2_post,ron2_prior,koff_post,koff_prior,roff_post,roff_prior,mu_post,mu_prior,q_post,q_prior)...
    lognpdf(mu_post,log(mu_prior),proposal_sigma) * lognpdf(kon1_post,log(kon1_prior),proposal_sigma) *...
    lognpdf(kon2_post,log(kon2_prior),proposal_sigma) * lognpdf(ron1_post,log(ron1_prior),proposal_sigma) *...
    lognpdf(ron2_post,log(ron2_prior),proposal_sigma) * lognpdf(koff_post,log(koff_prior),proposal_sigma) *...
    lognpdf(roff_post,log(roff_prior),proposal_sigma) * lognpdf(q_post,log(q_prior),proposal_sigma);

[result,~] = ABCPRCSampler(N,prior,f,rho,epsilon,T,proposal,proposal_pdf,1);
save(sprintf('E:/code/1_test/results1/example'),'result');


result_data = load('E:\\code\\1_test\\results1\\example');
result = getfield(result_data,'result');
last_iteration_result = result(:,end);%结果中的最后一列
dist = cellfun(@(c) c.dist,last_iteration_result);
[min_dist,min_ind] = min(dist);
param_vector = last_iteration_result(min_ind);%某基因推断出的最优参数值
param.kon1 = cellfun(@(c) c.kon1,param_vector);
param.kon2 = cellfun(@(c) c.kon2,param_vector);
param.ron1 = cellfun(@(c) c.ron1,param_vector);
param.ron2 = cellfun(@(c) c.ron2,param_vector);
param.koff = cellfun(@(c) c.koff,param_vector);
param.roff = cellfun(@(c) c.roff,param_vector);
param.mu = cellfun(@(c) c.mu,param_vector);
param.q = cellfun(@(c) c.q,param_vector);
param.delta = 1;
param.x0 = [1,0,0];
param.tottime = 2000;


[x,t] = simulQM(param);
tq = 1500:0.1:param.tottime;
xq = interp1(t,x(:,3),tq,'previous');%插值  函数关系由t,x(:,3)给出，插值tq对应的xq  x(:,3)表示x中的第三个元素，也就是mRNA分子数                                           
data = xq;
time_series = cat(2,t,x);
time_series2 = cat(1,tq,xq);
time_series2 = time_series2';
data_mean = mean(data);
data_var = var(data,1);
data_cv2 = data_var / data_mean^2;
data_fano = data_var / data_mean;
data_sk = skewness(data) + 1;
data_kt = kurtosis(data);
data_bc = ((data_sk-1)^2 + 1)/data_kt;
statis_infer = [data_mean,data_cv2,data_fano,data_sk,data_kt,data_bc]
statis_data = statisData(data);
true_statisQM = statisQM(param,4);


color=[[53 94 103]/255;[246 178 107]/255];
x=1:1:6;%x轴上的数据，第一个值代表数据开始，第二个值代表间隔，第三个值代表终止
a = statis; %a数据y值
b = statis_infer; %b数据y值
% plot(x,a,'-sr',x,b,'-ok'); %线性，颜色，标记
plot(x,a,'-','Color',color(1,:),'Marker','o','Markersize',3,'LineWidth',2); 
hold on
plotx,b,'-','Color',color(2,:),'Marker','^','Markersize',3,'LineWidth',2)
axis([0,7,0,15])  %确定x轴与y轴框图大小
set(gca,'XTick',[0:1:6]) %x轴范围1-6，间隔1
set(gca,'XTickLabel',{' ','Mean','CV^2','Fano','Skewness','Kurtosis','Bimodal coefficient'})
set(gca,'YTick',[0:3:15]) %y轴范围0-700，间隔100
legend('True','Inference');   %右上角标注
xlabel('Data feature')  %x轴坐标描述
ylabel('Value') %y轴坐标描述
set(gca,'linewidth',1.5)
set(gca,'FontWeight','bold')
set(gca,'FontName','Times New Rome','FontSize',10);

% figure
% histogram(data,'normalization','pdf')%横坐标表示数据的取值，纵坐标表示该数据出现的概率
% set(gca,'ytick',0:0.1:1)